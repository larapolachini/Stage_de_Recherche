---

window_width: 600       # In pixels
window_height: 600      # In pixels

arena_file: arenas/disk.csv
#arena_file: arenas/arena8.csv
#arena_file: arenas/star.csv
#arena_file: arenas/square.csv
arena_surface: 1.0e6 # 1.0e6    # In mm²

delete_old_files: true
enable_data_logging: true
data_filename: "frames/data.feather"
enable_console_logging: true
console_filename: "frames/console.txt"
save_data_period: 1.0       # In s
save_video_period: 1.0      # In s
frames_name: "frames/f{:010.4f}.png"

seed: 0
show_communication_channels: false  # In the GUI, can enabled/disabled using F5
show_communication_channels_above_all: false # Flag indicating if the communication channels must be drawn above the objects (true) or below. Can be enabled/disabled using F5
show_lateral_LEDs: true             # In the GUI, can enabled/disabled using F6
show_light_levels: false            # In the GUI, can enabled/disabled using F6
GUI: true

# Time
simulation_time: 1000.0     # In s
time_step: 0.01            # In s
GUI_speed_up: 10.0         # How much the visualisation in the GUI should be sped up

# The initial positions of the robot, set as a formation.
# "initial_formation" can be:
#   - "random": all robots are placed randomly in the arena, with random direction,
#   - "aligned_random": all robots are placed randomly in the arena, all with with pi/2 direction.
#   - "disk": robots are placed uniformly in a disk shape at the center of the arena.
#   - "lloyd": robots are placed randomly with an approximately equi-spaced distribution
#       by running a few iterations of Lloyd’s relaxation (a.k.a. “K-means” on a dense uniform sample).
#       This method assumes all objects/robots have the same radius.
#   - "power_lloyd" (default): Similar approach to "lloyd", but using a weighted approach (Laguerre diagrams)
#       to handle cases where objects/robots do not have the same radius.
#   - "imported": import the (X, Y, angle) coordinates from a csv or feather dataframe specified by parameter "formation_filename".
#       E.g.:
#               formation_filename: "/tmp/data.feather"
#       By default, the coordinates from the csv/feather file will not be rescaled, and must be in the same units as the simulation.
#       As such, a feather file generated from the results of another simulation with the same arena can directly be used: if a 'time' column is present in the
#       dataframe, only the coordinates of agents at t=0s are used. If the coordinates do not originate from a simulation, they may be specified in different
#       units as the simulation: in this case, it is necessary to specify the "imported_formation_min_coords" and "imported_formation_max_coords" to correspond
#       to the lower and upper bounds of the coordinate system. All provided coordinates will then be rescaled to match those of the simulation. E.g.
#               imported_formation_min_coords: [0.0, 0.0]
#               imported_formation_max_coords: [17.0, 17.0]
#       Note that the angle (aka "theta") column is optional: if it is not provided, the angle will be sampled from a [-pi, pi] uniform distribution.
initial_formation: random # random # imported
formation_min_space_between_neighbors: 0.0
formation_max_space_between_neighbors: .inf

#formation_filename: "/tmp/coords.csv"
#formation_filename: "/tmp/coords.feather"
formation_filename: "/tmp/data.feather"
#formation_filename: "frames/data.feather"
#imported_formation_min_coords: [.nan, .nan]
#imported_formation_max_coords: [.nan, .nan]
#imported_formation_min_coords: [0.0, 0.0]
#imported_formation_max_coords: [17.0, 17.0]

# Whether or not to ignore occlusions (e.g. other robots, focal robot) when computing communication exchanges and neighbors lists
communication_ignore_occlusions: false


# List of objects created in the simulation, by category
objects:
    # An object category containing a single light spot encompassing the entire simulation
    global_light:
        type: static_light  # The light is not active (does not move and does not have a controller)
        geometry: global    # The light involve the entire simulation
        value: 200          # Value of the light between 0 and 32767. Corresponds to the light level detected by the Pogobots (e.g. by the pogobot_photosensors_read function)
        photo_start_at: 1.0 # Whether to enable a photo start (values ≥ 0) and when (in seconds). 
                            # A photo start is a short period of time at the beginning of an experiment where the light is changed so that the robots know they should
                            # start their user program in a synchronous manner.
        photo_start_duration: 1.0   # Duration of the photo start period, in seconds
        photo_start_value: 32767    # Light value during the photo start period (between 0 and 32767). Should be very different from the normal value of the light


    # An object category containing a small light spot around the middle of the arena
    target_light:
        type: static_light  # The light is not active (does not move and does not have a controller)
        geometry: disk      # Shape of the light. Can be 'disk', 'rectangle' or 'global'
        x: 500              # Center of the light spot, X coordinate, in mm
        y: 500              # Center of the light spot, Y coordinate, in mm
        radius: 200         # Radius of the light spot. in mm
        value: 10000        # Value of the light between 0 and 32767. Corresponds to the light level detected by the Pogobots (e.g. by the pogobot_photosensors_read function)


    # An object category containing passive objects. They can be moved by robots, but don't have sensors/actuators/controller
    obstacles:
        type: passive_object    # Passive object: does not have a controller
        geometry: rectangle     # Shape of the object. Can be "disk" or "rectangle"
        nb: 3                   # Number of objects to create
        colormap: rainbow       # Colormap used to assign a random color to the object. Can be "rainbow" or "qualitative"

        #radius: 70             # In mm, if geometry is a disk
        body_width: 70          # In mm, if geometry is a rectangle
        body_height: 50         # In mm, if geometry is a rectangle

        # Physical properties
        body_linear_damping: 0.0
        body_angular_damping: 0.0
        body_density: 10.1
        body_friction: 0.3
        body_restitution: 0.3


    # An object category referencing Pogowalls, i.e. LEDs strips fixed on static walls that can send/receive messages, and with a Pogobot head/controller
    walls:
        type: pogowall      # Category type for Pogowalls
        geometry: arena     # Shape of the object. "Arena" means it will use the walls of the entire arena specified by "arena_file" (cf top of config file)
        communication_radius: 50.0  # The communication ratius of the Pogowalls, in mm
        msg_success_rate:
            type: static # Fixed msg success rate -- do not depend on the density, or message size
            rate: 0.9
            #type: dynamic # Msg success rate follows this formula: "1 / (1 + (alpha * msg_size**beta * p_send**gamma * cluster_size**delta))"
            #alpha: 0.000004
            #beta: 2.8096
            #gamma: 2.3807
            #delta: 1.2457


    # An object category describing membranes, a special type of Pogowalls apposed on flexible membranes
    membranes:
        type: membrane        # Category type for membranes
        nb: 1                 # Number of membranes to create
        geometry: disk        # Initial geometry of the membranes -- they are flexible, so the shape will change during the simulation. Can be "disk" or "rectangle"
        colormap: qualitative # Colormap used to assign a random color to the object. Can be "rainbow" or "qualitative"

        x: 500      # X coordinate of the center of the create membrane, in mm
        y: 500      # Y coordinate of the center of the create membrane, in mm

        radius: 200             # In mm, if geometry is a disk
        #body_width: 100        # In mm, if geometry is a rectangle
        #body_height: 100       # In mm, if geometry is a rectangle

        # Membrane dots and joints
        num_dots: 40            # Number of dots of the membrane, i.e. of disk-shaped elements.
                                # Only the dots are used to handle collisions in membranes, so the number should be enough
                                # (elsewise robots can pass through the membrane)
        dot_radius: 20          # Radius of the dots, in mm
        cross_span: 1           # Connect every i‑th neighbour to stiffen the sheet (if > 1)

        communication_radius: 50.0  # The communication ratius of the membrane, in mm
        msg_success_rate:
            type: static # Fixed msg success rate -- do not depend on the density, or message size
            rate: 0.9
            #type: dynamic # Msg success rate follows this formula: "1 / (1 + (alpha * msg_size**beta * p_send**gamma * cluster_size**delta))"
            #alpha: 0.000004
            #beta: 2.8096
            #gamma: 2.3807
            #delta: 1.2457

        # Physical properties
        body_linear_damping: 0.3
        body_angular_damping: 0.3
        body_density: 10.0
        body_friction: 0.3
        body_restitution: 0.5


    # An object category containing the Pogobot robots
    robots:
        type: pogobot       # Category type pertaining to Pogobots
        nb: 100             # Number of objects (Pogobots) in this category
        geometry: disk                  # Pogobots are always disk-shaped
        radius: 26.5                    # In mm

        # Physical properties
        body_linear_damping: 0.3
        body_angular_damping: 0.3
        body_density: 10.0
        body_friction: 0.3
        body_restitution: 0.5

        max_linear_speed: 100.0
        max_angular_speed: 1.0
        linear_noise_stddev: 0.5
        angular_noise_stddev: 2.0

        # Communication propeties
        communication_radius: 80.0      # In mm, from each IR emitter. Pogobots typically have 4 IR emitters (front, left, back, right)
        msg_success_rate:
            #type: static # Fixed msg success rate -- do not depend on the density, or message size
            #rate: 0.9
            type: dynamic # Msg success rate follows this formula: "1 / (1 + (alpha * msg_size**beta * p_send**gamma * cluster_size**delta))"
            alpha: 0.000004
            beta: 2.8096
            gamma: 2.3807
            delta: 1.2457


#    robots2:
#        type: pogobot
#        nb: 5
#        #initial_formation: disk
#        geometry: disk                  # Pogobots are always disk-shaped
#        radius: 16.5                    # In mm
#
#        body_linear_damping: 0.3
#        body_angular_damping: 0.3
#        body_density: 10.0
#        body_friction: 0.3
#        body_restitution: 0.5
#        #body_collision_shape: circle
#        #body_collision_radius: 0.00
#        body_linear_noise_stddev: 0.5
#        body_angular_noise_stddev: 2.0
#
#        communication_radius: 120.0     # In mm, from each IR emitter
#        msg_success_rate:
#            type: static
#            rate: 0.9
#
#    robots3:
#        type: pogobject
#        nb: 2
#        geometry: disk                  # Pogobots are always disk-shaped
#        radius: 50.0                    # In mm
#
#        body_linear_damping: 0.3
#        body_angular_damping: 0.3
#        body_density: 1000.0
#        body_friction: 0.3
#        body_restitution: 0.5
#        #body_collision_shape: circle
#        #body_collision_radius: 0.00
#
#        communication_radius: 120.0     # In mm, from each IR emitter
#        msg_success_rate:
#            type: static
#            rate: 0.9



########### Parameters used to directly initialize variables from the C code of the robots ###########
parameters:
    # Configuration parameters for the run_and_tumble example
    run_duration_min: 100
    run_duration_max: 2000
    tumble_duration_min: 100
    tumble_duration_max: 1100
    test_vect: [42., 23., 11., 18.]

# MODELINE "{{{1
# vim:expandtab:softtabstop=4:shiftwidth=4:fileencoding=utf-8
# vim:foldmethod=marker
